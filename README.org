#+title: README

* My Flaky NixOS Config
** Bootstrapping
1. Obtain a [[https://nixos.org/download.html#nixos-iso][bootable NixOS iso image]]

2. Write it verbatim to a usb thumbdrive

3. Boot your system with it

4. Clean the boot entries
   #+begin_src shell
   for i in {0..15}; do sudo efibootmgr -B -b 000$(printf "%X" $i); done
   #+end_src

5. Wipe the drive clean
   #+begin_src shell
   sudo blkdiscard -f /dev/nvme0n1
   #+end_src

6. Clone this flake
   #+begin_src shell
   git clone https://github.com/panchoh/nixos.git
   #+end_src

7. Manage filesystems with Disko
   #+begin_src shell
   cd nixos
   sudo bin/activate-disko
   #+end_src

8. Bootstrap NixOS

   *CAVEAT EMPTOR*: it takes a few minutes.
   #+begin_src shell
   sudo nixos-install --verbose --no-root-password --no-channel-copy --flake github:panchoh/nixos#krypton
   #+end_src

9. Move flake to target system
   #+begin_src shell
   mkdir -p /mnt/home/pancho/sandbox/panchoh
   mv -iv ~/nixos /mnt/home/pancho/sandbox/panchoh
   sudo mkdir /mnt/etc/nixos && cd /mnt/etc/nixos && sudo ln -s /home/pancho/sandbox/panchoh/nixos/flake.nix
   #+end_src

10. Reboot
   #+begin_src shell
   reboot
   #+end_src

11. Change the password
   #+begin_src shell
   passwd
   #+end_src

12. Finish setting up

    Home Manager is not activated by ~nixos-install~ for some reason.
    #+begin_src shell
    doas nixos-rebuild switch --verbose
    #+end_src

13. Optimise the storage just this once
   #+begin_src shell
    nix store optimise --verbose
   #+end_src

14. Reboot
    #+begin_src shell
    reboot
    #+end_src

15. Enjoy!

** Commit Style
Adhere to Semantic Commit Messages
- https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716
- https://www.conventionalcommits.org/en/v1.0.0/

** Useful Pointers
*** Overview (mindmap)
- https://coggle.it/diagram/Y9k9VVmUw-1okyFh/t/nix

*** Flakes
- https://thiscute.world/en/posts/nixos-and-flake-basics/
- https://nixos-and-flakes.thiscute.world/
- https://serokell.io/blog/practical-nix-flakes :reallygood:
- https://nix.dev/tutorials/first-steps/nix-language
- https://ayats.org/blog/no-flake-utils/
- https://flake.parts/
- https://git.alioth.systems/mirrors/nixpkgs/commit/e5db80ae487b59b4e9f950d68983ffb0575e26c6 TODO ReadOnly
  - https://github.com/NixOS/nixpkgs/blob/795e6ce6794ed60d144b77d88f144e44d0e32ad0/flake.nix#L57
- https://github.com/serokell/deploy-rs :abbe:
- https://github.com/numtide/treefmt-nix :formatter:

*** Tips
- https://pavluk.org/blog/2023/05/30/nix_packaging.html
- https://discourse.nixos.org/t/tips-tricks-for-nixos-desktop/28488
- https://www.reddit.com/r/NixOS/comments/14fveyk/where_do_flakes_install_files_binaries_to/
#+begin_src nix
  nix store gc
#+end_src

*** Nixpkgs
- https://nixos.org/manual/nixos/stable/#sec-customising-packages
- https://nixos.wiki/wiki/Nixpkgs/Create_and_debug_packages
- https://ryantm.github.io/nixpkgs/builders/trivial-builders/#trivial-builder-writeShellApplication
- https://discourse.nixos.org/t/differences-between-nix-channels/13998
- https://nixos.wiki/wiki/Glossary
- RFC 140: ~pkgs/by-name~
  https://discourse.nixos.org/t/ci-will-soon-enforce-pkgs-by-name-for-new-packages/38098/3

*** Nix Registry
- https://nixos.org/manual/nix/unstable/command-ref/new-cli/nix3-registry.html
- https://discourse.nixos.org/t/how-to-pin-nix-registry-nixpkgs-to-release-channel/14883/6
- https://discourse.nixos.org/t/using-flakes-in-home-manager-module-especially-for-unfree-packages/21476
- https://discourse.nixos.org/t/local-flake-based-nix-search-nix-run-and-nix-shell/13433/13
- https://github.com/tejing1/nixos-config/blob/11424383bed8eff2d5399f638cc5d1ef732425dc/nixosConfigurations/tejingdesk/registry.nix#L27-L29
#+begin_src nix
# the version of this flake used to build the system
  nix.registry.activeconfig.flake = self;
  environment.etc."nix/path/activeconfig".source = self;
#+end_src

*** Wrapping packages
- https://nixos.wiki/wiki/Wrappers_vs._Dotfiles
- https://nixos.wiki/wiki/Nix_Cookbook#Wrapping_packages

*** Home Manager
- Creating dotfiles that are proper files, not symlinks
  https://github.com/nix-community/home-manager/issues/3090#issuecomment-1835357162

** dotfiles to Explore
- [ ] https://github.com/nix-community/awesome-nix
- [ ] https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/
- [ ] https://github.com/alarsyo/doom-conf
- [ ] https://github.com/Simon-Kenn/nixOs-sample
- [ ] https://gitlab.com/Zaney/zaneyos/-/blob/main/config/home/hyprland.nix?ref_type=heads hyprland config
- [ ] https://myme.no/posts/2022-06-14-nixos-confederation.html https://github.com/myme/dotfiles pure latinum!
- [ ] https://github.com/kclejeune/system Tons of good stuff
- [ ] https://github.com/pmarreck/nix_machine_configs kernel.task_delayacct
- [ ] https://github.com/PaulGrandperrin/nix-systems
- [ ] https://github.com/pyrotelekinetic/figura
- [ ] https://rgoulter.com/blog/posts/programming/2022-02-20-using-home-manager-to-manage-symlinks-to-dotfiles.html
- [ ] https://github.com/dustinlyons/nixos-config/
- [ ] https://gitlab.com/usmcamp0811/dotfiles/-/blob/nixos/flake.nix?ref_type=heads NUC8, XPS13
- [ ] https://github.com/rohand2290/sb2-nixos-config/blob/main/home.nix example usage of nixvim
- [ ] https://gitlab.com/hmajid2301/dotfiles/
- [ ] https://gitlab.com/steveej/infra/
- [ ] https://github.com/TLATER/dotfiles/blob/master/home-config/config/graphical-applications/firefox.nix nur, tridactyl
- [ ] https://github.com/TLATER/dotfiles/blob/master/nixos-config/yui/default.nix
- [ ] https://github.com/chvp/nixos-config/
- [ ] https://github.com/midchildan/dotfiles/blob/main/nix/home/modules/emacs.nix Doom Emacs config
- [ ] https://github.com/Misterio77/nix-starter-configs
- [ ] https://github.com/ryan4yin/nix-config/tree/i3-kickstarter
- [ ] https://github.com/librephoenix/nixos-config including Doom Emacs config
- [ ] https://github.com/drduh/YubiKey-Guide#nixos password generation
- [ ] https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/
- [ ] https://github.com/spikespaz/dotfiles/tree/master hyprland flake and more!
- [ ] https://github.com/adtya/nixos-config virt-manager goodness and more!
- [ ] https://github.com/woojiq/nixos-config/
- [ ] https://github.com/SomeGuyNamedMy/users/blob/master/flake.nix
- [ ] https://github.com/dagss/nixpkgs/blob/master/pkgs/tools/security/opensc-dnie-wrapper/default.nix
- [ ] https://git.bicompact.space/hazel/etc/commit/c4e01962f7175158060d5765c14bf404590e2a00
- [ ] https://github.com/MattSturgeon/nix_config
- [ ] https://github.com/angristan/nixos-config/blob/master/configuration.nix
- [ ] https://gist.github.com/jhillyerd/d2a2f4ee99dfefe7f1a672a643e6edc3
- [ ] https://github.com/NotAShelf/nyx/tree/system-module
- [ ] https://gitea.krutonium.ca/Krutonium/NixOS/src/branch/master/flake.nix
- [ ] https://github.com/kloenk/nix
- [ ] https://github.com/dlip/nixconfig-starter/blob/main/flake.nix
- [ ] https://github.com/mrkuz/nixos
- [ ] https://github.com/jonringer/nixpkgs-config
- [ ] https://github.com/baitinq/nixos-config
- [ ] https://gitlab.com/maxbaroi/nixos-config/
- [ ] https://heinicke.xyz/nixos/
- [ ] https://github.com/jwiegley/dot-emacs/blob/master/init.org
- [ ] https://github.com/robbert-vdh/dotfiles/blob/master/user/emacs/.config/doom/config.org
- [ ] https://codeberg.org/nosewings/emacs-init/src/branch/main/flake.nix
- [ ] https://nixos.wiki/wiki/Comparison_of_NixOS_setups
- [ ] https://nixos.wiki/wiki/Configuration_Collection
- [ ] https://github.com/idlip/d-nix
- [ ] https://github.com/Shawn8901/nix-configuration
- [ ] https://github.com/privatevoid-net/depot/blob/master/hosts/nixos.nix
- [ ] https://github.com/meppu/nix-config
- [ ] https://github.com/matklad/config/blob/master/hosts/default.nix
- [ ] https://github.com/mitchellh/nixos-config
- [ ] https://github.com/Kranzes/nix-config
- [ ] https://github.com/ryantm/dotfiles
- [ ] https://github.com/znewman01/dotfiles
- [ ] https://github.com/srid/nixos-config/blob/master/flake.nix
- [ ] https://git.sr.ht/~bwolf/dotfiles/tree/master/item/flake.nix
- [ ] https://github.com/terlar/emacs-config/blob/main/flake.nix
- [ ] https://github.com/bbigras/nix-config/
- [ ] https://git.hrnz.li/Ulli/nixos/src/branch/main/profiles/pipewire/mic.nix
- [ ] https://github.com/bqv/rc
- [ ] https://git.sr.ht/~glorifiedgluer/monorepo
- [ ] https://github.com/tejing1/nixos-config/
- [ ] https://github.com/MatthewCroughan/nixcfg/blob/master/modules/profiles/sway.nix
- [ ] https://codeberg.org/totoroot/dotfiles/
- [ ] https://github.com/hlissner/dotfiles/blob/master/flake.nix
- [ ] xe's https://github.com/Xe/nixos-configs
- [ ] https://codeberg.org/JustineSmithies/hyprland-dotfiles
- [ ] https://github.com/hyprwm/Hyprland/pull/870#issuecomment-1319448768
- [ ] https://github.com/fufexan/dotfiles/blob/main/home/wayland/hyprland/config.nix
- [ ] hyprland https://github.com/davmedeiros/dotfiles/blob/main/hyprland/.config/hypr/hyprland.conf
- [ ] https://github.com/fufexan/dotfiles/blob/main/home/wayland/hyprland/config.nix#enroll-beta
- [ ] https://github.com/fufexan/dotfiles/blob/main/flake.nix
- [ ] https://guekka.github.io/nixos-server-1/
- [ ] https://codeberg.org/imMaturana/dotfiles/src/branch/main/flake.nix
- [ ] https://github.com/dwarfmaster/home-nix/blob/master/flake.nix
- [ ] https://github.com/olistrik/nixos-config Nix is love. Nix is life.

** Emacs
*** Doom
**** CheatSheet
- https://www.damiengonot.com/notes/computer-science/tools/text-editors/emacs/doom-emacs

**** Tip by @nilp0inter on how to ensure that the doom init script has git available
- ~callPackage~
- https://github.com/NixOS/nixpkgs/blob/d450afc911598812d54cbac7e384a2bf4724f9ce/pkgs/development/compilers/rust/cargo-auditable-cargo-wrapper.nix
- https://raw.githubusercontent.com/NixOS/nixpkgs/d450afc911598812d54cbac7e384a2bf4724f9ce/pkgs/top-level/all-packages.nix

**** TODO Install GitHub Copilot
- https://robert.kra.hn/posts/2023-02-22-copilot-emacs-setup/
- https://github.com/zerolfx/copilot.el/commit/653fe7b12990b5b7a050971bed4579022ce4b4f8

**** Install ChatGPT
- https://github.com/emacs-openai/chatgpt

**** TODO Install marksman
https://github.com/artempyanykh/marksman

**** ~doomPrivateDir~
- https://github.com/nix-community/nix-doom-emacs/issues/297
- https://github.com/nix-community/nix-doom-emacs/blob/master/default.nix

**** Seen on AUR/emacs29-git
~emacs29-git/site-list-aot.md~
#+begin_quote
# ON-DEMAND COMPILATION OF SITE-LISP AND LOCAL PACKAGES

To compile all site-lisp on demand (repos/AUR packages, ELPA, MELPA, whatever), add

 (setq native-comp-deferred-compilation t)

to your `.emacs` file.

Or search the option in the editor's GUI configuration, set it
to true and save your `.emacs` file to add it to the file's
`custom-set-variables` array automatically.

As emacs-git changes its version everytime you compile a new
binary, new eln files are generated for that particular binary
and old versions will accumulate over time. To keep the eln-cache
tidy, add this to your `.emacs` file:

    (setq native-compile-prune-cache t)
#+end_quote

**** To Review
- https://discourse.nixos.org/t/advice-needed-installing-doom-emacs/8806/8
- https://github.com/danth/stylix/pull/77 emacs 29+ alpha-background

*** Direct Simple Override
#+begin_src nix
environment.systemPackages = [
  (pkgs.emacs.override {withPgtk = true;});
];
#+end_src

*** Global Override
#+begin_src nix
nixpkgs.config.packageOverrides = pkgs: {
  emacs = pkgs.emacs.override {withPgtk = true;};
};
#+end_src

*** Global Override with Packages
#+begin_src nix
{...}: let
  emacsWithPgtk = pkgs.emacs.override {withPgtk = true;};
  emacsWithPackages = (pkgs.emacsPackagesFor emacsWithPgtk).emacsWithPackages;
  customEmacs = emacsWithPackages (epkgs: with epkgs.melpaPackages; [magit pdf-tools vterm dracula-theme]);
in {
  # ...
    packages = with pkgs; [
    customEmacs
    emacs-all-the-icons-fonts
  ];
}
#+end_src

*** Iosevka
- https://stackoverflow.com/questions/62230166/configuring-iosevka-for-nix

*** Using Nix Community’s Emacs Overlay
- https://github.com/bbigras/nix-config/
- https://github.com/terlar/emacs-config/blob/main/flake.nix
- https://git.sr.ht/~bwolf/dotfiles/tree/master/item/flake.nix
- https://www.reddit.com/r/NixOS/comments/uzcfjz/trouble_with_emacs_overlay
- https://discourse.nixos.org/t/how-to-apply-an-overlay-defined-in-one-flake-in-my-flake/11987

** Things to Explore/Implement
*** NixOS Modules
- https://github.com/Gabriella439/nixos-in-production/blob/main/manuscript/Modules.md
- https://nixos.wiki/wiki/NixOS_modules
- https://github.com/NixOS/rfcs/blob/master/rfcs/0042-config-option.md
  - https://github.com/NixOS/rfcs/blob/master/rfcs/0042-config-option.md#part-1-1
**** Conditional imports
- https://discourse.nixos.org/t/conditionally-import-module-if-it-exists/17832

*** Flake framework
- https://snowfall.org/

*** foot
- https://codeberg.org/dnkl/foot/issues/628#issuecomment-283074
- https://ersei.net/en/blog/its-nixin-time

*** swap
- https://discourse.nixos.org/t/how-do-i-set-up-a-swap-file/8323
- https://www.reddit.com/r/NixOS/comments/145dd8k/anyone_using_zram_in_2305/

*** stylix
- https://github.com/danth/stylix/pull/23 duality hm nixos

*** NixOS Generators
- https://github.com/nix-community/nixos-generators
- https://www.reddit.com/r/NixOS/comments/y1xo2u/how_to_create_an_iso_with_my_config_files/?rdt=44430
- https://nixos.wiki/wiki/Creating_a_NixOS_live_CD

*** EasyEffects
- https://nix-community.github.io/home-manager/options.html#opt-services.easyeffects.enable
- https://en.wikipedia.org/wiki/EasyEffects
- https://www.reddit.com/r/NixOS/comments/10c3s93/homemanager_nixos_module_or_best_practice_for/

*** NUR
- https://nur.nix-community.org/repos/rycee/

*** Overlays with flake-parts
- https://discourse.nixos.org/t/how-to-use-overlays-in-a-flake-with-flake-parts/24308/4

*** hyprland on nVidia
- https://www.reddit.com/r/NixOS/comments/137j18j/need_guide_on_installing_hyprland/

*** direnv
- https://github.com/znewman01/dotfiles/blob/master/.envrc

*** List of non-legacy software
- https://nolegacy.codeberg.page/software/

*** OCR to clipboard
- https://www.reddit.com/r/NixOS/comments/13uboa6/text_from_image_to_clipboard_nix_tip/ (check for one-liner by balsoft)
#+begin_src shell
grim -g "$(slurp)" - | tesseract - - | wl-copy -
#+end_src

*** Sway (maybe applies to Hyprland)
- https://github.com/alebastr/sway-systemd/blob/main/src/session.sh

*** Hardening
- https://nixos.wiki/wiki/Security
- https://nixos.wiki/wiki/Systemd_Hardening
- https://nixos.org/manual/nix/stable/installation/nix-security.html
- https://xeiaso.net/blog/paranoid-nixos-2021-07-18

*** nixos-anywhere
- https://numtide.com/blog/nixos-anywhere-intro/

*** console
- https://discourse.nixos.org/t/need-help-setting-tty-font/16295/5
- https://github.com/NixOS/nixpkgs/blob/nixos-unstable/nixos/modules/config/console.nix

*** kmscon
- https://discourse.nixos.org/t/removing-persistent-boot-messages-for-a-silent-boot/14835/8
- https://wiki.archlinux.org/title/KMSCON
- https://www.mankier.com/1/kmscon
- https://github.com/Aetf/kmscon

*** lib.getExe
trace: warning: getExe: Package "bat-0.23.0" does not have the =meta.mainProgram=
attribute. We'll assume that the main program has the same name for now, but
this behavior is deprecated, because it leads to surprising errors when the
assumption does not hold. If the package has a main program, please set
=meta.mainProgram= in its definition to make this warning go away.
Otherwise, if the package does not have a main program,
or if you don't control its definition, specify the full path to the program,
such as ~"${lib.getBin foo}/bin/bar"~.
